{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","animateCard","className","onMouseOver","src","alt","CardArray","robots","animations","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","overflowX","height","children","App","onSearchChange","event","setState","target","value","onHoverCard","thing","classList","add","setTimeout","remove","state","fetch","then","response","json","users","filtredRobots","this","filter","robot","toLowerCase","includes","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yRAiBeA,G,MAdF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,GAAGC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YACzB,OACI,yBAAKC,UAAU,YAAYC,YAAaF,GACpC,yBAAKG,IAAG,+BAA0BN,EAA1B,iBAA6CO,IAAI,WACzD,6BACI,4BAAKN,GACL,2BAAIC,OCILM,EAVG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAOC,EAAgB,EAAhBA,WACvB,OACID,EAAOE,KAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGb,GAAIS,EAAOI,GAAGb,GAAIC,KAAMQ,EAAOI,GAAGE,SAAUb,MAAOO,EAAOI,GAAGX,MAAOC,YAAaO,QCInGM,EARG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACG,yBAAKd,UAAU,sBACX,2BAAOA,UAAU,uBAAuBe,KAAK,SAASC,YAAY,eAAeC,SAAUH,MCKvFI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAY,SAAUC,UAAY,SAAWC,OAAS,UAC9DJ,EAAMK,YCiDJC,E,kDA/CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAf/B,EAkBdC,YAAc,SAACJ,GACX,IAAMK,EAAQL,EAAME,OACpBG,EAAMC,UAAUC,IAAI,WAAY,SAChCC,YAAW,WACPH,EAAMC,UAAUG,OAAO,WAAY,WACrC,MArBF,EAAKC,MAAQ,CACThC,OAAQ,GACRQ,YAAa,IAJP,E,gEAQO,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACvB,OAAQqC,S,+BAehC,IAAD,OACCC,EAAgBC,KAAKP,MAAMhC,OAAOwC,QAAQ,SAAAC,GAC5C,OAAOA,EAAMnC,SAASoC,cAAcC,SAAS,EAAKX,MAAMxB,YAAYkC,kBAExE,OACI,yBAAK/C,UAAU,eACX,2CACA,yBAAKA,UAAU,8BACX,kBAAC,EAAD,CAAWc,aAAc8B,KAAKlB,kBAElC,kBAAC,EAAD,KACI,yBAAK1B,UAAU,8BACX,kBAACiD,EAAD,CAAU5C,OAAQsC,EAAerC,WAAYsC,KAAKb,qB,GAvCxDmB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b26d100.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id,name,email,animateCard}) => {\r\n    return(\r\n        <div className='RobotCard' onMouseOver={animateCard}>\r\n            <img src={`https://robohash.org/${id}?size=150x150`} alt='profil'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({robots,animations}) => {\r\n    return (\r\n        robots.map((user,i) => {\r\n            return <Card key={i} id={robots[i].id} name={robots[i].username} email={robots[i].email} animateCard={animations} />\r\n        } )\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n    return(\r\n       <div className='col-2 my-2 my-lg-0'>\r\n           <input className='form-control mr-sm-2' type='search' placeholder='Search Robot' onChange={searchChange}/> \r\n       </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox ;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY : 'scroll', overflowX : 'hidden' , height : '406px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}) )\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    onHoverCard = (event) => {\r\n        const thing = event.target;\r\n        thing.classList.add('animated', 'pulse');\r\n        setTimeout(function () {\r\n            thing.classList.remove('animated', 'pulse');\r\n        },1000)\r\n    }\r\n\r\n    render() {\r\n        const filtredRobots = this.state.robots.filter( robot => {\r\n            return robot.username.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return (\r\n            <div className='text-center'>\r\n                <h1>RoboFriends</h1>\r\n                <div className='row justify-content-center'> \r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                </div>\r\n                <Scroll>\r\n                    <div className='row justify-content-center'>\r\n                        <CardList robots={filtredRobots} animations={this.onHoverCard} />\r\n                    </div>\r\n                </Scroll>\r\n            </div>  \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}